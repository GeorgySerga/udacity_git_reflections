# How did viewing a diff between two versions of a file help you see the bug that was introduced?

  Well, if it worked before, then the mistake is in the defferent lines. Less work to find mistakes.

# How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

  Error may occur N versions ago and it's inconvinient to store files with millions of names in one folder. Also it is great for reviewing your progress as a developer.

# How Often to Commit

  A good rule of thumb is to make one commit per logical change. For example, if you fixed a typo, then fixed a bug in a separate part of the file, you should use one commit for each change since they are logically separate. If you do this, each commit will have one purpose that can be easily understood. Git allows you to write a short message explaining what was changed in each commit, and that message will be more useful if each commit has a single logical change.

# What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

  Forgetting (when to commit, what to commit). Poor logic of the commits is a disadvantage of "Google docs" style.

# Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

  It's mainly version control system for developers. Because developers usually do stuff in different files and they are all required for program to function properly.

# How can you use the commands git log and git diff to view the history of files?

  git log is used to show the log of previous commits. There could be different erguments, like -2 - to show last 2 entries, or --stat to show stats. git diff first_id second_id is used to compare two different commits (first is old, second is new).

# How might using version control make you more confident to make changes that could break something?

  Nothing could be broken completely.

# Now that you have your workspace set up, what do you want to try using Git for?

  Well, I know basics, but i want to contribute to other projects.

Commands:
git log  |    List the commits and show which files have changed. Use 'q' to exit, arrows to move.
git log --stat  |    Show addition information about the commits
git diff id1 id2  |    Compare two commits (id1 is old one, id2 is new one)
git clone  |    Create a local copy/clone of/from the repository
git config --global color.ui auto |    get git colored
git checkout  |    Shows a previous version of the file. This is not a checkout to edit like in SVN or TFS!
git checkout commit_id  |  shows (uses) the commit version which is specified.
git checkout branch_id  |  switch to different branch
